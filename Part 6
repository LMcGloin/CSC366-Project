CSC 366 part 6

	For our project we choose a program that will help choose a place to eat based on facts provided to the system by the user. With this type of program comes many opportunities for belief revision, where the program creates a belief set based on an input but then it changes through contraction, expansion, or revision because of a later input. Because of the nature of this type of program it will likely change its belief set many times before it makes it recommendations. 
	Our program starts out with receiving an input from the user which can be something like ‘I want something cheap and sweet’, our program will then parse it. After the sentence is parsed it will then get the meanings of descriptors like cheap and sweet and go to the knowledge base using the descriptors to find a restaurant that is cheap and serves something sweet. This will likely give a recommendation of something like Carvel where it is cheap serving sweet foods.
	Belief revision can come in in many different ways it can first be seen at the start with contraction where you initially have a belief set of the entire knowledge base and after you receive your input restaurants and foods in your belief set will start to be removed. For example if the input is ‘I want something cheap and spicy’ you can then remove restaurants like red lobster, and foods like ice cream. The next part where belief revision comes in is expansion, this occurs when restaurants or foods are added to the belief set, this can be seen with all of the foods added to the knowledge base, for example with the descriptor spicy this would add tocos to the knowledge base. Another type of belief change that may be seen is revision where a descriptor will add and remove restaurants or foods from the belief set. This may be seen with the descriptors chicken and expensive, the belief set add all the restaurants that serve chicken and then remove all the ones that are less than expensive. 
A problem that may arise during belief revision is when seemingly contradictory statements are received for example, wanting an American dish with chicken, and then we receive the input of rice (A specific example of three things that never occur together in our knowledge base). If this happens, we will narrow in on the second half of the user input and subsequently reject the initial input. We have decided to do our revisions this way during conflictions because we figured that people will rather their most recent inputs to supersede the prior conflicting input; this is for two reasons, we assume that the options we gave for the initial input weren’t appealing and secondly that the user has changed their mind on what they want.
